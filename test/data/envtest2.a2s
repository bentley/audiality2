def title	"EnvelopeTest2"
def version	"1.0"
def description	"Test of the 'env' unit timing modes"
def author	"David Olofson"
def copyright	"Copyright 2016 David Olofson"
def license	"Public domain. Do what you like with it. NO WARRANTY!"
def a2sversion	"1.9"

def ATTACK	100
def DECAY	1000
def RELEASE	50


// Envelope timing controlled by 'target' register ramping
PingEnv(P V Mode)
{
	struct {
		env E
		wtosc
		wire E.out a
	}

	w sine; p P
	E.mode Mode
	E.target V; ramp E.target ATTACK

	d ATTACK

	E.target 0; ramp E.target DECAY
.stop	end

	1() {
		E.target 0; ramp E.target RELEASE
		force stop
	}
}


// Envelope timing controlled by via 'time' register
PingEnvTime(P V Mode)
{
	struct {
		env E
		wtosc
		wire E.out a
	}

	w sine; p P
	E.mode Mode
	E.time ATTACK; E.target V

	d ATTACK

	E.time DECAY; E.target 0
.stop	end

	1() {
		E.time RELEASE; E.target 0
		force stop
	}
}


Test(P I Pan Mode)
{
	struct {
		inline
		panmix
	}
	@pan Pan
	1:I P .4 Mode;	td 12;	1<1;	td 4
	1:I P .4 Mode;	td 4;	1<1;	td 4
	1:I P .4 Mode;	td 1;	1<1;	td 7
}


export Song(P V=1 L=0)
{
	tempo 140 4
	def C units.env.constants
	for {
		// Linear
		!m C.LINEAR
		Test 0n PingEnv -1 m
		Test 3n PingEnvTime 1 m
		td 32

		// Spline
		m C.SPLINE
		Test 0n PingEnv -1 m
		Test 4n PingEnvTime 1 m
		td 32

		// Tapered exponential 1/10
		m C.EXP1
		Test 0n PingEnv -1 m
		Test 5n PingEnvTime 1 m
		td 32

		// Inverse tapered exponential 1/10
		m C.IEXP1
		Test 0n PingEnv -1 m
		Test 6n PingEnvTime 1 m
		td 32
	}
}
