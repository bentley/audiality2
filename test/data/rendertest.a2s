def title	"RenderTest"
def version	"1.0"
def description	"Test of rendering a program off-line into a wave"
def author	"David Olofson"
def copyright	"Copyright 2014, 2016 David Olofson"
def license	"Public domain. Do what you like with it. NO WARRANTY!"
def a2sversion	"1.9"


  //
 // Pre-rendered wave for the Strings instrument
/////////////////////////////////////////////////////////////////////
StrW0(P G)
{
	struct { wtosc }
	w saw; phase (rand 1)
	@a (G * .5)
	@p P
	for {
		+p (P - p * .4 + rand .02 - .01)
		+a (rand G - a * .03)
		d (rand 5 + 2.5)
	}
}

RenderStringsWave(Voices Spread Gain)
{
	!detune (0 - (Spread / 2))
	(Voices * 5 / 8) {
		*:StrW0 detune Gain
		+detune (Spread / Voices)
	}
	+detune 1
	(Voices * 2 / 8) {
		*:StrW0 detune Gain
		+detune (Spread / Voices)
	}
	+detune 1
	(Voices * 1 / 8) {
		*:StrW0 detune Gain
		+detune (Spread / Voices)
	}
}

wave StringsWave
{
	wavetype MIPWAVE		// Mipmapped wave
	samplerate 96000		// Sample rate 96 kHz at pitch 0
	length 15000; looped		// Short, deliberately ugly loop. :-)
	RenderStringsWave 100 .02 .1	// Render with 100 voices!
}


  //
 // Basic sampleplayer for the rendered wave
/////////////////////////////////////////////////////////////////////
Strings(P V=1)
{
	struct { wtosc; panmix }
	if P > -1 {
		@pan (P * 2 - .5)
	}
	w StringsWave; @p P
	a V; d 300
	end
.rel	a 0; d 600
	1() { force rel }
}


  //
 // Some chords...
/////////////////////////////////////////////////////////////////////
Bass()
{
	def V 1
	def i Strings
	1:i -27n V;	td 16; 1<1
	1:i -30n V;	td 16; 1<1
	1:i -34n V;	td 16; 1<1
	1:i -29n V;	td 16; 1<1
}

Chords()
{
	def V .3
	def i Strings
	1:i -3n V;	2:i -1n V;	3:i 1n V;	4:i 4n V;	td 16
							4<1
							4:i 6n V;	td 16
					3<1
					3:i 2n V;			td 16
							4<1
							4:i 7n V;	td 16
	1<1;		2<1;		3<1;		4<1
}


  //
 // Main program
/////////////////////////////////////////////////////////////////////
Main(L)
{
	tempo 90 4
.rep
	Bass;			td 64
	Bass;	Chords;		td 64
		Chords;		td 64
	if L {	// Loop?
		jump rep
	}
}

export Song(P V=1 L=1)
{
	struct {
		inline 0 *
		panmix * >
	}
	vol .8; set vol
	Main L
	end
.stop	10 { *vol .7; d 100 }
	vol 0; d 100
	kill
	1() { force stop }
}
