def title	"MegaStrings"
def version	"1.0"
def description	"Test of recursive offline wave rendering"
def author	"David Olofson"
def copyright	"Copyright 2013 David Olofson"
def license	"Public domain. Do what you like with it. NO WARRANTY!"
def a2sversion	"1.9"


  //
 // Pre-rendered wave for the Strings instrument
/////////////////////////////////////////////////////////////////////
.StrW0(P G W)
{
	struct { wtosc }
	w W; phase (rand 100)
	a (G * .5); set a
	p P; set p
	for {
		+p (P - p * .4 + rand .02 - .01)
		+a (rand G - a * .03)
		d (rand 5 + 2.5)
	}
}

RenderStringsWave(Voices Spread Gain W)
{
	!detune (0 - (Spread / 2))
	(Voices * 4 / 9) {
		0:StrW0 detune Gain W
		+detune (Spread / Voices)
	}
	+detune 1
	(Voices * 3 / 9) {
		0:StrW0 detune Gain W
		+detune (Spread / Voices)
	}
	+detune 1
	(Voices * 2 / 9) {
		0:StrW0 detune Gain W
		+detune (Spread / Voices)
	}
}

wave StringWave
{
	// Render basic strings loop using 100 saw oscillators
	wavetype MIPWAVE; samplerate 96
	length 20000; looped; revmix; normalize
	RenderStringsWave 100 .02 .15 saw
}

wave StringsWave
{
	// Render megaphatt strings using 100 oscillators playing StringWave
	wavetype MIPWAVE
	samplerate 192
	length 32000; looped; revmix; normalize
	RenderStringsWave 100 .02 .4 StringWave
}


  //
 // Basic sampleplayer for the rendered wave
/////////////////////////////////////////////////////////////////////
Strings(P V=1)
{
	struct { wtosc; panmix }
	if P > -1 {
		pan (P * 2 - .5); set pan
	}
	w StringsWave; p P
	a V; d 300
	end
.rel	a 0; d 600
	1() { force rel }
}


  //
 // Some chords...
/////////////////////////////////////////////////////////////////////
Bass()
{
	def V 1
	def i Strings
	1:i -27n V;	td 16; 1<1
	1:i -30n V;	td 16; 1<1
	1:i -34n V;	td 16; 1<1
	1:i -29n V;	td 16; 1<1
}

Chords()
{
	def V .3
	def i Strings
	1:i -3n V;	2:i -1n V;	3:i 1n V;	4:i 4n V;	td 16
							4<1
							4:i 6n V;	td 16
					3<1
					3:i 2n V;			td 16
							4<1
							4:i 7n V;	td 16
	1<1;		2<1;		3<1;		4<1
}


  //
 // Main program
/////////////////////////////////////////////////////////////////////
Main(L)
{
	tempo 90 4
.rep
	Bass;			td 64
	Bass;	Chords;		td 64
		Chords;		td 64
	if L {	// Loop?
		jump rep
	}
}

Song(P V=1 L=1)
{
	struct {
		inline 0 *
		panmix * >
	}
	vol 1; set vol
	Main L
	end
.stop	10 { *vol .7; d 100 }
	vol 0; d 100
	kill *
	1() { force stop }
}
