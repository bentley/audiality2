def title	"Evil Noises"
def version	"1.0"
def description	"The second ChipSound song ever written (straight mono conversion)"
def author	"David Olofson"
def copyright	"Copyright 2011 David Olofson"
def license	"CC BY-NC-ND 3.0"
def a2sversion	"1.9"

.flute(pitch vel=1)
{
	struct { wtosc }
	w triangle, p pitch, -p .05, a vel, d 50
	10 {
		5 {	+p .01, *a .95, d 10 }
		5 {	-p .01, *a .95, d 10 }
	}
}

.farp(trans v=1 dv)
{
	!n 26n, +n trans,
	4 {
		-n 2n, flute n v, +v dv,	td 8
		+n 2n, flute n v, +v dv,	td 8
		+n 1n, flute n v, +v dv,	td 8
		+n 2n, flute n v, +v dv,	td 8
		+n 2n, flute n v, +v dv,	td 8
		-n 2n, flute n v, +v dv,	td 8
		-n 2n, flute n v, +v dv,	td 8
		-n 1n, flute n v, +v dv,	td 8
	}
}

.DWVib(pitch)
{
	struct { wtosc }
	!p1 (pitch - .5n), !p2 (pitch + .5n)
	w triangle
	20 {
		p p1, +a .01, td 2
		p p2, td 2
	}
	40 {
		p p1, -a .005, td 2
		p p2, td 2
		-p2 .01n
	}
}

.sonar()
{
	struct { wtosc }
	!max .5
	w square, a max, p 1000f, d 5
	a max, d 30
	a 0, d 15
	w triangle
	300 {
		p (rand .1 + 1000f)
		rand a max, *max .97
		d 15
	}
}

.ResoBass(pitch vel=1 reso)
{
	struct { wtosc }
	+reso pitch, +reso 2, w triangle
	p2d pitch pitch
	100 {
		phase 0, p reso, a vel, set a
		a 0, d pitch
		-reso 1n
		*vel .8
	}
}

.rl(p1 vel p2 r dr)
{
	-p1 36n, +p2 p1
	ResoBass p1 vel r, +r dr, td 8
	ResoBass p2 vel r, +r dr, td 8
	ResoBass p2 vel r, +r dr, td 8
	ResoBass p1 vel r, +r dr, td 8
	ResoBass p2 vel r, +r dr, td 8
	ResoBass p1 vel r, +r dr, td 8
	ResoBass p1 vel r, +r dr, td 8
	ResoBass p2 vel r, +r dr, td 8
}

.resoloopi(pitch vel=1 p2=1)
{
	rl pitch vel p2 .4 -.05,	td 64
	rl pitch vel p2 0 -.05,		td 64
	rl pitch vel p2 -.4 .05,	td 64
	rl pitch vel p2 0 .05,		td 64
}

.resoloop(pitch vel=1 p2=1)
{
	rl pitch vel p2 0 .2,		td 64
	rl pitch vel p2 1.6 .2,		td 64
	rl pitch vel p2 3.2 -.2,	td 64
	rl pitch vel p2 1.6 -.2,	td 64
}

.resoloop2(pitch vel=1 p2=1)
{
	rl pitch vel p2 1.6 -.2,	td 64
	rl pitch vel p2 0 -.1,		td 64
	rl pitch vel p2 -.8 .1,		td 64
	rl pitch vel p2 0 .1,		td 64
}

.EvilSyncBass(pitch vel=1 drive)
{
	struct { wtosc }
	!per (p2d pitch * .5)
	a vel, set a
	p 5, w noise, phase 0, d 2
	p (pitch + 2), w square, d per
	w saw, p (pitch + .5 + drive)
	10 {
		+p .01, w saw, phase 0, d per
		*a .97, w square, d per
	}
	for {
		+p .01, w saw, phase 0, d per
		*a .99, w square, d per
	}
}

.h1(trans drive)
{
	!d1 (drive + 1.4)
	!d2 (drive + .3)
	!n (trans - 36n)
		EvilSyncBass n .8 d1,		td 24, kill *
	+n 7n,	EvilSyncBass n .8 d2,		td 24, kill *
	-n 1n,	EvilSyncBass n .8 drive,	td 48, kill *
	-n 6n,	EvilSyncBass n .3,		td 6, kill *
						td 10
		EvilSyncBass n .3,		td 4, kill *
						td 12
}
.h2(trans drive)
{
	!d1 (drive + 1.4)
	!d2 (drive + .3)
	!n (trans - 36n)
		EvilSyncBass n .8 d1,		td 8, kill *
		EvilSyncBass n .3 drive,	td 16, kill *
	+n 7n,	EvilSyncBass n .8 drive,	td 4, kill *
		EvilSyncBass n .3,		td 12, kill *
	+n 11n,	EvilSyncBass n .8 d2,		td 4, kill *
		EvilSyncBass n .3,		td 4, kill *
	-n 1,	EvilSyncBass n .8 drive,	td 48, kill *
	-n 6n,	EvilSyncBass n .3,		td 6, kill *
						td 10
		EvilSyncBass n .3,		td 4, kill *
						td 4
	+n 1,	EvilSyncBass n .3 2.5,		td 4, kill *,
	-n 1,					td 4
}
.h3(trans)
{
	!n (trans - 36n)
		EvilSyncBass n .8 .5,		td 24, kill *
	+n 7n,	EvilSyncBass n .8 1,		td 24, kill *
	-n 1n,	EvilSyncBass n .8 1.5,		td 24, kill *
		EvilSyncBass n .3,		td 8, kill *
	-n 3n,	EvilSyncBass n .8 2,		td 16, kill *
		EvilSyncBass n .3,		td 8, kill *
	-n 1n,	EvilSyncBass n .8 2.5,		td 16, kill *
		EvilSyncBass n .3,		td 8, kill *
}
.heavy(trans)
{
	h1 trans,	td 128
	h2 trans 1.2,	td 128
	h1 trans .7,	td 128
	h3 trans,	td 128
}

.h21(d1 d2)
{
	EvilSyncBass -36n .8 d1,	td 8, kill *
	EvilSyncBass -36n .3,		td 16, kill *
	EvilSyncBass -36n .8 d2,	td 8, kill *
	EvilSyncBass -36n .3,		td 16, kill *
}
.h22(d1 d2)
{
	h21 d1 d2,			td 48
	EvilSyncBass -24n .8 2,		td 4, kill *
	td 4
	EvilSyncBass -36n .8 1.2,	td 8, kill *
	EvilSyncBass -36n .3 .3,	td 16, kill *
	EvilSyncBass -34n .8 1.7,	td 8, kill *
	EvilSyncBass -34n .3 .7,	td 8, kill *
	EvilSyncBass -22n .8 2,		td 4, kill *
	td 4
	EvilSyncBass -33n .8 2.3,	td 8, kill *
	EvilSyncBass -33n .3 1,		td 8, kill *
	EvilSyncBass -21n .5 3,		td 4, kill *
	td 4
}
.heavy2()
{
	h21 2,		td 128
	h21 1,		td 128
	h21 1.7,	td 128
	h22 2.3 1,	td 128
}

.heavy0()
{
	h1,		td 128
	h21 2,		td 128
	h1 0 .7,	td 128
	h22 2.3 1,	td 128
}

.h31(d1 d2)
{
	EvilSyncBass -24n .5 d1,	td 4, kill *
	EvilSyncBass -36n .2,		td 20, kill *
	EvilSyncBass -36n .5 d2,	td 4, kill *
	EvilSyncBass -36n .2,		td 20, kill *
}
.h32(d1 d2)
{
	h31 d1 d2,			td 48
	EvilSyncBass -24n .5 2,		td 4, kill *
	td 4
	EvilSyncBass -36n .5 1.2,	td 4, kill *
	EvilSyncBass -36n .2 .3,	td 20, kill *
	EvilSyncBass -34n .6 1.7,	td 6, kill *
	EvilSyncBass -34n .2 .7,	td 10, kill *
	EvilSyncBass -22n .7 2,		td 4, kill *
	td 4
	EvilSyncBass -33n .8 2.3,	td 8, kill *
	EvilSyncBass -33n .3 1,		td 8, kill *
	EvilSyncBass -21n .5 3,		td 4, kill *
	td 4
}
.heavy3()
{
	h31,		td 128
	h31 2,		td 128
	h31 0 .7,	td 128
	h32 2.3 1,	td 128
	h31,		td 128
	h31 2,		td 128
	h31 3 1.5,	td 128
	h32 3.5 2.5,	td 128
}

.heavy4(pitch)
{
	EvilSyncBass (pitch - 3) .4,		td 248, kill *
	EvilSyncBass (pitch - 2) .6 1.7,	td 4, kill *
}

.sdn(vel)
{
	struct { wtosc }
	w noise, p 6, a vel, set a, d 5
	p 5, *a .3, d 20
	*a .2, d 200
	100 {
		!dl (rand 10 + 1)
		p 4.5, *a .95, d dl
		p 6, d dl
	}
}
.sdrum(pitch vel=1)
{
	struct { wtosc }
	sdn vel
	w square, p (pitch + 2.1), a vel, set a
	10 {	-p .2, d 1 }
	d 10
	-p .2, d 10
	5 {
		!dl (rand 2 + 3)
		w saw, -p .51, d dl
		w square, +p .5, *a .7, d dl
	}
	*a .5, !p0 (p - .8)
	1000 {	p (rand 1.5 + p0), *a .99, d 1 }
}

.bdnoise(pitch vel)
{
	struct { wtosc }
	w noise, p (pitch + 4), a (vel * .2), set a
	*a .05, d 30
	a 0, d 200
}
.bdrum(pitch vel=1)
{
	struct { wtosc }
	bdnoise pitch vel
	w sine, p (pitch + 4), a vel, set a
	5 {	-p .9, d 1 }
	d 10
	5 {	-p .2, d 2 }
	d 20
	10 {	-p .1, d 3 }
	d 30
	a 0, d 30
	d 200
}

.tn(pitch)
{
	struct { wtosc }
	w noise, p (pitch + 6), a .5, set a, d 10
	-p 2
	100 {	-p .07, *a .8, d 10 }
}
.tom(pitch)
{
	struct { wtosc }
	tn pitch
	w saw, p (pitch + 3), a 1, set a
	10 {	-p .35, d 1 }
	w triangle
	7 {
		-p .15, *a .9, d 10
		+p 3n, d 10, -p 3n
	}
	20 {
		-p .01, *a .8, d 10
		+p 3n, d 10, -p 3n
	}
}

.c0(P V W Rmax D)
{
	struct { wtosc }
	w W, a V, set a, +tr P
	!rmh (Rmax * .25)
	200 {
		p (rand Rmax - rmh), *Rmax .997, *rmh .997, *a .995
		td D
	}
	40 {
		100 {
			p (rand Rmax - rmh), td D
		}
		*a .85, *Rmax .99, *rmh .99
	}
}
.cymbal()
{
	c0 5.3 1 saw 1 .03
	c0 4 1 saw 2 .04
	c0 3.5 .4 square 2 .05
	c0 2.7 .2 sine 1.5 .06
	c0 2 .15 sine 2.5 .07
}

.rd(P V W rpitch mrpitch per)
{
	struct { wtosc }
	w W, a V, set a
	20 {
		100 {	p (rand rpitch + P), d per }
		*rpitch mrpitch, *a .7
	}
}
.ride(pitch vel=1)
{
	rd (pitch + 5) (vel * .4) saw 1 1 .4
	rd (pitch + 4.5) (vel * .2) saw .7 .96 .6
	rd (pitch + 4.3) (vel * .1) square 1.5 .97 .7
	rd (pitch + 3.5) (vel * .05) square .3 .97 1
}

.hhclosed()
{
	struct { wtosc }
	w square, a .3, set a, p 5.5
	3 {	d 1, -p .5 }
	100 {	p (rand .5 + 4.7), *a .95, d 1 }
}

.hhopen()
{
	struct { wtosc }
	w square, a .3, set a, p 5.5
	3 {	d 1, -p .5 }
	300 {	p (rand .5 + 4.7), *a .993, d 1 }
}

.ridebeat()
{
	15 {	ride, td 32 }
	ride,	td 16
	ride,	td 16
}

.ridebeatup()
{
	!v .1
	15 {	ride 0 v, td 32, +v .06 }
	ride, td 16
	ride, td 16
}

.beat1()
{
	bdrum, td 24
	bdrum, td 8
	sdrum, td 16
	bdrum, td 32
	bdrum, td 16
	sdrum, td 32
}
.beat2()
{
	bdrum, td 24
	bdrum, td 8
	sdrum, td 16
	bdrum, td 32
	bdrum, td 8
	bdrum, td 8
	sdrum, td 32
}
.beat3()
{
	bdrum, td 24
	bdrum, td 8
	sdrum, td 16
	bdrum, td 32
	bdrum, td 8
	bdrum, td 8
	sdrum, td 16
	bdrum, td 8
	sdrum, td 8
}
.beat()
{
	beat1,	td 128
	beat2,	td 128
	beat1,	td 128
	beat3,	td 128
}

.dbeat1()
{
	bdrum,	td 24
	bdrum,	td 8
	sdrum,	td 16
	bdrum,	td 80
}
.dintro()
{
	dbeat1,		td 256
	dbeat1,		td 208
	bdrum,		td 8
	bdrum 0 .7,	td 8
	sdrum,		td 8
	bdrum 0 .7,	td 8
	bdrum,		td 8
	sdrum 0 .7,	td 8
}
.roll()
{
	!vel .2
	8 { bdrum 0 vel, sdrum 0 vel, +vel .1, td 8 }
}
.dbreak()
{
	dbeat1,		td 256
	dbeat1,		td 192
	roll,		td 64
}

.fill()
{
		td 440
	tom 6n,	td 8
	tom 6n,	td 16
	tom 3n,	td 8
	tom 3n,	td 16
	tom,	td 8
	tom,	td 16
}

.hihats()
{
	64 { hhclosed, td 8 }
}

.hihats2()
{
	32 { hhclosed, td 16 }
}

.hihats3()
{
	4 {
		hhclosed,	td 8
		hhclosed,	td 8
		hhclosed,	td 16
		hhclosed,	td 16
		hhclosed,	td 16
		hhclosed,	td 16
		hhclosed,	td 16
		hhopen,		td 16
		hhclosed,	td 16
	}
}

.p0() {	hihats3,	cymbal,		dintro,		td 512	}
.p1() {	hihats,		ridebeat,	cymbal,	beat,	td 512	}
.p2() {	p1,					fill,	td 512	}
.p3() {	hihats2,	cymbal,			beat,	td 512	}
.p4() {	p3,		ridebeatup,		fill,	td 512	}
.intro()
{
	resoloopi,	sonar,			td 128
			ride -5n .5,		td 128
	resoloop,	cymbal,	bdrum,		td 128
	sonar,					td 128
	cymbal,	bdrum,	hihats2,	heavy0,	td 512
	sonar,		p0,		heavy0,	td 512
}
.theme()
{
	sonar,	p1,	heavy,		td 512
	sonar,	p2,	heavy -3n,	td 512
}
.inter1()
{
	p3,	heavy2,	resoloop 12n,	td 256
			resoloop 18n,	td 256
	p4,	heavy2,	resoloop 15n,	td 256
			resoloop 9n,	td 256
}
.inter2()
{
	farp -2 .1 .001,	heavy4
		cymbal,	bdrum,	hihats3,	resoloop 24n .4 0,	td 256
	farp -2 .132 .001,	heavy4 2n,	resoloop 26n .5 3n,	td 256
	farp -2 .164 .001,	p0,	ridebeatup
				heavy4 3n,	resoloop 24n .6 3n,	td 256
	farp -2 .196 .001,	heavy4 5n,	resoloop 24n .7 5n,	td 256
}
.break()
{
	DWVib,		DWVib 7n,	cymbal
	resoloop2 2,	hihats3,	dbreak,		td 128
	sonar,						td 128
	DWVib 7n,	DWVib 12n,	resoloop2 2,	td 128
	sonar,						td 128
}
.break2()
{
	bdrum,		sdrum,		cymbal,	td 64
	roll,					td 64
}

.Main(L)
{
	tick (1000 / 60)
	intro,	td 1536
.rep
	theme,	td 1024
	inter1,	td 1024
	theme,	td 1024
	inter1,	td 1024
	break,	td 512
	theme,	td 1024
	break2,	td 128
	inter1,	td 1024
	inter2,	td 1024
	if L {
		jump rep
	}
}

Song(P V=1 L=0)
{
	struct { inline, panmix }

	// Transposition + volume - no fade-in
	+tr P, vol (V * .3), set vol

	1:Main L
	wait 1
	end
.stop
	// Fade out
	10 {
		*vol .7
		d 100
	}
	vol 0, d 100
	kill *

	// "Stop" message handler
	1() {
		force stop
	}
}
